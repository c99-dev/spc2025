<div class="container py-4">
  <div class="row">
    <div class="col-lg-12">
      <div class="card shadow-sm">
        <div
          class="card-header d-flex justify-content-between align-items-center bg-primary text-white"
        >
          <h3 class="mb-0"><i class="bi bi-bell me-2"></i>알림</h3>
          <% if (notifications && notifications.length > 0) { %>
          <button id="markAllAsRead" class="btn btn-light btn-sm">
            <i class="bi bi-check-all me-1"></i>모두 읽음 표시
          </button>
          <% } %>
        </div>
        <div class="card-body">
          <% if (notifications && notifications.length > 0) { %>
          <div class="list-group notification-list">
            <% notifications.forEach(notification => { %>
            <div
              class="list-group-item notification-item <%= notification.is_read ? 'read' : 'unread' %>"
              data-id="<%= notification.id %>"
            >
              <div class="d-flex w-100 justify-content-between">
                <h5 class="mb-1">
                  <% if (!notification.is_read) { %>
                  <span class="badge rounded-pill bg-danger me-2">새 알림</span>
                  <% } %>
                  <a
                    href="/music/<%= notification.music_id %>"
                    class="notification-link"
                  >
                    <%= notification.music_title %>
                  </a>
                </h5>
                <small class="text-muted"
                  ><%= new Date(notification.created_at).toLocaleString()
                  %></small
                >
              </div>
              <p class="mb-1"><%= notification.message %></p>
              <div
                class="d-flex justify-content-between align-items-center mt-2"
              >
                <a
                  href="/music/<%= notification.music_id %>"
                  class="btn btn-sm btn-outline-primary"
                >
                  <i class="bi bi-music-note me-1"></i>음악 바로가기
                </a>
                <% if (!notification.is_read) { %>
                <button
                  class="btn btn-sm btn-outline-secondary mark-read-btn"
                  data-id="<%= notification.id %>"
                >
                  <i class="bi bi-check2 me-1"></i>읽음 표시
                </button>
                <% } %>
              </div>
            </div>
            <% }); %>
          </div>
          <% } else { %>
          <div class="text-center py-5">
            <i class="bi bi-bell-slash text-muted" style="font-size: 3rem"></i>
            <p class="mt-3 text-muted">알림이 없습니다.</p>
          </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // 개별 알림 읽음 처리
    const markReadButtons = document.querySelectorAll('.mark-read-btn');
    markReadButtons.forEach((button) => {
      button.addEventListener('click', async function () {
        const notificationId = this.getAttribute('data-id');
        try {
          const response = await fetch(
            `/notifications/read/${notificationId}`,
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
            }
          );

          if (response.ok) {
            const notificationItem = document.querySelector(
              `.notification-item[data-id="${notificationId}"]`
            );
            notificationItem.classList.remove('unread');
            notificationItem.classList.add('read');
            this.parentElement.removeChild(this);

            // 헤더의 알림 카운트 감소
            updateNotificationCount(-1);
          }
        } catch (error) {
          console.error('알림 읽음 처리 오류:', error);
        }
      });
    });

    // 모든 알림 읽음 처리
    const markAllAsReadButton = document.getElementById('markAllAsRead');
    if (markAllAsReadButton) {
      markAllAsReadButton.addEventListener('click', async function () {
        try {
          const response = await fetch('/notifications/read-all', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          if (response.ok) {
            const unreadNotifications = document.querySelectorAll(
              '.notification-item.unread'
            );
            unreadNotifications.forEach((item) => {
              item.classList.remove('unread');
              item.classList.add('read');
              const readBtn = item.querySelector('.mark-read-btn');
              if (readBtn) {
                readBtn.parentElement.removeChild(readBtn);
              }
            });

            // 헤더의 알림 카운트 초기화
            updateNotificationCount(-999); // 모두 제거하는 특수 값
          }
        } catch (error) {
          console.error('모든 알림 읽음 처리 오류:', error);
        }
      });
    }

    // 헤더의 알림 카운트 업데이트 함수
    function updateNotificationCount(delta) {
      const badge = document.getElementById('notification-badge');
      if (badge) {
        if (delta === -999) {
          // 모두 제거
          badge.style.display = 'none';
        } else {
          const currentCount = parseInt(badge.textContent);
          const newCount = currentCount + delta;

          if (newCount <= 0) {
            badge.style.display = 'none';
          } else {
            badge.textContent = newCount;
          }
        }
      }
    }
  });
</script>
